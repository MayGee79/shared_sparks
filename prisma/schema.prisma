generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Activity {
  id        String   @id
  title     String
  content   String?
  userEmail String
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User     @relation(fields: [userEmail], references: [email])

  @@index([userEmail])
}

model Comment {
  id        String   @id
  content   String
  problemId String
  createdAt DateTime @default(now())
  userId    String
  Problem   Problem  @relation(fields: [problemId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Problem {
  id          String        @id
  title       String
  description String
  category    String
  industry    String
  status      ProblemStatus
  voteCount   Int           @default(0)
  submitterId String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  Comment     Comment[]
  User        User          @relation(fields: [submitterId], references: [id])
}

model SaaS {
  id                          String         @id
  name                        String
  description                 String
  website                     String
  logo                        String?
  pricingModel                String
  pricingDetails              String?
  category                    String
  tags                        String[]
  features                    String[]
  integrations                String[]
  pros                        String[]
  cons                        String[]
  averageRating               Float?
  submitterId                 String?
  verified                    Boolean        @default(false)
  createdAt                   DateTime       @default(now())
  updatedAt                   DateTime
  User_SaaS_submitterIdToUser User?          @relation("SaaS_submitterIdToUser", fields: [submitterId], references: [id])
  SaaSReview                  SaaSReview[]
  SaasFavorite                SaasFavorite[]
  User_UserFavorites          User[]         @relation("UserFavorites")
  ViewHistory                 ViewHistory[]
}

model SaaSReview {
  id        String   @id
  content   String
  rating    Int
  saasId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  SaaS      SaaS     @relation(fields: [saasId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model SaasFavorite {
  id        String   @id
  userId    String
  saasId    String
  createdAt DateTime @default(now())
  SaaS      SaaS     @relation(fields: [saasId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, saasId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                                                             String                   @id
  email                                                          String?                  @unique
  userType                                                       UserType                 @default(DEVELOPER)
  emailVerified                                                  DateTime?
  hashedPassword                                                 String?                  @default("")
  image                                                          String?
  allowCollaboration                                             Boolean                  @default(true)
  bio                                                            String?
  createdAt                                                      DateTime                 @default(now())
  expertise                                                      String[]
  firstName                                                      String?
  github                                                         String?
  goals                                                          String[]                 @default([])
  industry                                                       String?
  interests                                                      String[]                 @default([])
  lastName                                                       String?
  linkedin                                                       String?
  notificationPrefs                                              Json?
  profileVisibility                                              String                   @default("public")
  role                                                           String?
  skills                                                         String[]
  twitter                                                        String?
  updatedAt                                                      DateTime                 @default(now())
  username                                                       String?                  @unique
  Account                                                        Account[]
  Activity                                                       Activity[]
  Comment                                                        Comment[]
  Problem                                                        Problem[]
  SaaS_SaaS_submitterIdToUser                                    SaaS[]                   @relation("SaaS_submitterIdToUser")
  SaaSReview                                                     SaaSReview[]
  SaasFavorite                                                   SaasFavorite[]
  Session                                                        Session[]
  UserPreference                                                 UserPreference?
  collaboration_requests_collaboration_requests_receiverIdToUser collaboration_requests[] @relation("collaboration_requests_receiverIdToUser")
  collaboration_requests_collaboration_requests_senderIdToUser   collaboration_requests[] @relation("collaboration_requests_senderIdToUser")
  SaaS_UserFavorites                                             SaaS[]                   @relation("UserFavorites")
  SavedSearch                                                    SavedSearch[]
  ViewHistory                                                    ViewHistory[]
}

model UserPreference {
  id            String  @id
  userId        String  @unique
  notifications Boolean @default(true)
  theme         String  @default("light")
  User          User    @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model collaboration_requests {
  id                                           String   @id
  senderId                                     String
  receiverId                                   String
  status                                       String   @default("pending")
  message                                      String?
  createdAt                                    DateTime @default(now())
  User_collaboration_requests_receiverIdToUser User     @relation("collaboration_requests_receiverIdToUser", fields: [receiverId], references: [id])
  User_collaboration_requests_senderIdToUser   User     @relation("collaboration_requests_senderIdToUser", fields: [senderId], references: [id])
}

model SavedSearch {
  id           String   @id @default(cuid())
  name         String
  query        String?
  category     String?
  pricingModel String?
  tags         String[] @default([])
  receiveAlerts Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  userId       String
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ViewHistory {
  id        String   @id @default(cuid())
  viewedAt  DateTime @default(now())
  
  userId    String
  saasId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  SaaS      SaaS     @relation(fields: [saasId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([saasId])
  @@index([viewedAt])
}

enum ProblemStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
}

enum UserType {
  PROBLEM_SUBMITTER
  DEVELOPER
  ADMIN
}
