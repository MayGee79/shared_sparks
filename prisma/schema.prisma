generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  PROBLEM_SUBMITTER
  DEVELOPER
}

enum ProblemStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  userType      UserType  @default(PROBLEM_SUBMITTER)
  hashedPassword String?  @default("")
  accounts      Account[]
  sessions      Session[]
  problems      Problem[]
  comments      Comment[]
  
  // Basic Profile
  username      String?   @unique
  bio           String?   @db.Text
  
  // Professional Background
  industry       String?
  role          String?
  expertise     String[]
  skills        String[]
  
  // Interests and Goals
  interests     String[] @default([])
  goals         String[] @default([])
  
  // Contact and Privacy
  allowCollaboration Boolean @default(true)
  profileVisibility  String  @default("public")
  notificationPrefs  Json?   // For storing notification settings
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  
  // Social Links
  linkedin        String?
  github          String?
  twitter         String?
  
  // Collaboration
  sentRequests     CollaborationRequest[] @relation("SentRequests")
  receivedRequests CollaborationRequest[] @relation("ReceivedRequests")
  preferences      UserPreference?
}

model Problem {
  id          String        @id @default(cuid())
  title       String
  description String
  category    String
  industry    String
  status      ProblemStatus
  voteCount   Int          @default(0)
  submitter   User         @relation(fields: [submitterId], references: [id])
  submitterId String
  comments    Comment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId String
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CollaborationRequest {
  id          String   @id @default(cuid())
  senderId    String
  receiverId  String
  status      String   @default("pending")
  message     String?
  createdAt   DateTime @default(now())
  
  sender      User     @relation("SentRequests", fields: [senderId], references: [id])
  receiver    User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
  
  @@map("collaboration_requests")
}

model UserPreference {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  notifications Boolean  @default(true)
  theme         String   @default("light")
}
