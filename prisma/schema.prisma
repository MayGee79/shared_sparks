generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String                 @id @default(cuid())
  email              String?                @unique
  userType           UserType               @default(PROBLEM_SUBMITTER)
  emailVerified      DateTime?
  hashedPassword     String?                @default("")
  image              String?
  allowCollaboration Boolean                @default(true)
  bio                String?
  createdAt          DateTime               @default(now())
  expertise          String[]
  firstName          String?
  github             String?
  goals              String[]               @default([])
  industry           String?
  interests          String[]               @default([])
  lastName           String?
  linkedin           String?
  notificationPrefs  Json?
  profileVisibility  String                 @default("public")
  role               String?
  skills             String[]
  twitter            String?
  updatedAt          DateTime               @default(now())
  username           String?                @unique
  accounts           Account[]
  activities         Activity[]
  comments           Comment[]
  problems           Problem[]
  sessions           Session[]
  preferences        UserPreference?
  receivedRequests   CollaborationRequest[] @relation("ReceivedRequests")
  sentRequests       CollaborationRequest[] @relation("SentRequests")
  submittedSaaS      SaaS[]                 @relation("SubmittedSaaS")
  favoriteSaaS       SaaS[]                 @relation("UserFavorites")
  saasReviews        SaaSReview[]
  saasFavorites      SaasFavorite[]
}

model Problem {
  id          String        @id @default(cuid())
  title       String
  description String
  category    String
  industry    String
  status      ProblemStatus
  voteCount   Int           @default(0)
  submitterId String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  comments    Comment[]
  submitter   User          @relation(fields: [submitterId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  problemId String
  createdAt DateTime @default(now())
  userId    String
  problem   Problem  @relation(fields: [problemId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CollaborationRequest {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     String   @default("pending")
  message    String?
  createdAt  DateTime @default(now())
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
  sender     User     @relation("SentRequests", fields: [senderId], references: [id])

  @@map("collaboration_requests")
}

model UserPreference {
  id            String  @id @default(cuid())
  userId        String  @unique
  notifications Boolean @default(true)
  theme         String  @default("light")
  user          User    @relation(fields: [userId], references: [id])
}

model Activity {
  id        String   @id @default(cuid())
  title     String
  content   String?
  userEmail String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userEmail], references: [email])

  @@index([userEmail])
}

model SaaS {
  id               String          @id @default(cuid())
  name             String
  description      String
  website          String
  logo             String?
  pricingModel     String
  pricingDetails   String?
  category         String
  tags             String[]
  features         String[]
  integrations     String[]
  pros             String[]
  cons             String[]
  averageRating    Float?
  submitterId      String?
  submitter        User?           @relation("SubmittedSaaS", fields: [submitterId], references: [id])
  verified         Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  favoritedBy      User[]          @relation("UserFavorites")
  favorites        SaasFavorite[]
  reviews          SaaSReview[]
}

model SaaSReview {
  id        String   @id @default(cuid())
  content   String
  rating    Int
  saasId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  saas      SaaS     @relation(fields: [saasId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model SaasFavorite {
  id        String   @id @default(cuid())
  userId    String
  saasId    String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  saas      SaaS     @relation(fields: [saasId], references: [id])
  
  @@unique([userId, saasId])
}

enum UserType {
  PROBLEM_SUBMITTER
  DEVELOPER
}

enum ProblemStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
}
